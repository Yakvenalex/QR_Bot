from aiogram import types, Dispatcher
from create_bot import bot, AcceptState
from aiogram.dispatcher import FSMContext
from keyboards import (keyboard_type_product, keyboard_type_product_list, keyboard_supplier_plasticat, keyboard_supplier_wire)


async def handle_start(message: types.Message):
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ß–µ–º —Å–µ–≥–æ–¥–Ω—è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?')


async def generate_qr(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞:', reply_markup=keyboard_type_product)
    await AcceptState.type_product.set()


async def restart_fsm(message: types.Message, state: FSMContext = None):
    await bot.send_message(message.from_user.id, '–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞ - –¥–µ–ª–∞–π —á—Ç–æ —Ö–æ—á–µ—à—åüòè')
    if state:
        await state.finish()



async def type_product(callback_query: types.CallbackQuery, state: FSMContext):
    type_product = callback_query.data
    await bot.answer_callback_query(callback_query.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {type_product}")
    await state.update_data(type_product=type_product)
    data = await state.get_data()
    if data['type_product'] == '–ü–ª–∞—Å—Ç–∏–∫–∞—Ç':
        await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞—Ç–∞:', reply_markup=keyboard_supplier_plasticat)
        await AcceptState.supplier_plasticat.set()
    elif data['type_product'] == '–ü—Ä–æ–≤–æ–ª–æ–∫–∞':
        await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–≤–æ–ª–æ–∫–∏:',
                               reply_markup=keyboard_supplier_wire)
        await AcceptState.supplier_wire.set()
    elif data['type_product'] == '–î—Ä—É–≥–æ–µ':
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        await AcceptState.enter_value.set()
    else:
        await bot.send_message(callback_query.from_user.id, '–ó–∞–≤–µ—Ä—à–∞—é –∞–Ω–∫–µ—Ç—É')
        await state.finish()


def register_handlers_client_main(dp: Dispatcher):
    dp.register_message_handler(handle_start, commands=['start'])
    dp.register_message_handler(restart_fsm, commands=['restart_fsm'],  state='*')
    dp.register_message_handler(generate_qr, commands=['accept_materials'])
    dp.register_callback_query_handler(type_product, state=AcceptState.type_product)